name: Deploy Test

on:
  workflow_dispatch:
  push:
    branches: [test]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false   

jobs:
  ecr:
    runs-on: ubuntu-latest
    environment: test
    permissions:
      id-token: write 
      contents: read 
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.2.2
      
      - name: Configure AWS Credentials (Assume Role)
        uses: aws-actions/configure-aws-credentials@00943011d9042930efac3dcd3a170e4273319bc8 #v5.1.0
        with:
          role-to-assume: ${{ secrets.ECR_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.ECR_REGION }}

      - name: Authenticate to Amazon ECR
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
        id: login-ecr

      - name: Set up JDK
        uses: actions/setup-java@v5
        with:
          distribution: 'corretto'
          java-version: '21'

      - name: Build JAR
        run: ./gradlew build
        env:
          GITHUB_ACTOR: ${{ secrets.GITHUB_ACTOR }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ENVIRONMENT: ${{ vars.ENV_NAME }}

      - name: Build and Push Docker Image to the container repository
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
          ENV_NAME: ${{ vars.ENV_NAME }}

      - name: Generate Deployment the Files
        run: |
          cat deployments/templates/deployment.yml | envsubst > deployments/deployment.yml
          cat deployments/templates/ingress.yml | envsubst > deployments/ingress.yml
          cat deployments/templates/service.yml | envsubst > deployments/service.yml
        env:
          REGISTRY: ${{ secrets.ECR_REGISTRY }}
          REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
          KUBE_NAMESPACE: ${{ secrets.KUBE_NAMESPACE }}
          NAMESPACE: ${{ secrets.KUBE_NAMESPACE }}
          KUBE_CLUSTER: ${{ secrets.KUBE_CLUSTER }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ENABLED: ${{ vars.SENTRY_ENABLED }}
          SENTRY_ENVIRONMENT: ${{ vars.ENV_NAME }}
          SPRING_PROFILE: ${{ vars.SPRING_PROFILE }}
          INGRESS_CLASS_NAME: ${{ vars.INGRESS_CLASS_NAME }}
          POPULATE_TEST_DATA: ${{ vars.POPULATE_DUMMY_DATA }}
          BASE_URL_HOMEPAGE: ${{ secrets.BASE_URL_HOMEPAGE }}


      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CERT }}" > ca.crt
          kubectl config set-cluster ${KUBE_CLUSTER} --certificate-authority=./ca.crt --server=https://${KUBE_CLUSTER}
          kubectl config set-credentials deploy-user --token=${{ secrets.KUBE_TOKEN }}
          kubectl config set-context ${KUBE_CLUSTER} --cluster=${KUBE_CLUSTER} --user=deploy-user --namespace=${KUBE_NAMESPACE}
          kubectl config use-context ${KUBE_CLUSTER}
        env:
          KUBE_NAMESPACE: ${{ secrets.KUBE_NAMESPACE }}
          KUBE_CLUSTER: ${{ secrets.KUBE_CLUSTER }}

      - name: Deploy to Cloud Platform
        run: |
          kubectl -n ${KUBE_NAMESPACE} apply -f deployments/
        env:
          KUBE_NAMESPACE: ${{ secrets.KUBE_NAMESPACE }}

      - name: Wait for new deployment to finish
        run: |
          kubectl -n ${KUBE_NAMESPACE} rollout status deployment --timeout=6m
        env:
          KUBE_NAMESPACE: ${{ secrets.KUBE_NAMESPACE }}

      # Get DB identifier to use for Prometheus alerts & Grafana configuration
      - name: Get DB identifier
        run: |
          #!/bin/bash
          RDS_DB_IDENTIFIER=$(kubectl get secret rds-postgresql-instance-output -o jsonpath='{.data.rds_instance_endpoint}' | base64 -d | cut -d. -f1 | xargs printf "%s")
          echo "RDS_DB_IDENTIFIER=${RDS_DB_IDENTIFIER}" >> "$GITHUB_ENV"

      # Prometheus alerts & Grafana config generation - after application deployment to avoid chicken/egg scenarios
      # Note: first rm command removes the previously generated files and doesn't remove the templates/ directory
      - name: Generate Monitoring Deployment Files
        run: |
          rm deployments/* 2> /dev/null || true
          cat deployments/templates/prometheus.yml | envsubst '$NAMESPACE,$ALERT_SEVERITY,$ENV_NAME,$RDS_DB_IDENTIFIER,$RDS_LOW_FREEABLE_MEMORY_TRIGGER,$ALERT_ALWAYS_ON_ENV' > deployments/prometheus.yml
          cat deployments/templates/grafanadashboard.yml | envsubst '$NAMESPACE,$ENV_NAME,$RDS_DB_IDENTIFIER' > deployments/grafanadashboard.yml
        env:
          NAMESPACE: ${{ secrets.KUBE_NAMESPACE }}
          ALERT_SEVERITY: ${{ secrets.KUBE_NAMESPACE }}
          ENV_NAME: ${{ vars.ENV_NAME }}
          # Alert trigger for remaining freeable memory on RDS instance, currently set in MB, below value is 85% of total memory
          RDS_LOW_FREEABLE_MEMORY_TRIGGER: "150"
          # Should be 'prd' only if the environment is prd, otherwise set it to an random string.
          ALERT_ALWAYS_ON_ENV: 'null'

      # Prometheus alerts & Grafana deployment
      - name: Deploy Monitoring to Cloud Platform
        run: |
          kubectl -n ${KUBE_NAMESPACE} apply -f deployments/
        env:
          KUBE_NAMESPACE: ${{ secrets.KUBE_NAMESPACE }}