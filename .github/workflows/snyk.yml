name: Snyk Security Scan
on:
  pull_request:
    types:
      - opened
      - reopened
      - edited
      - synchronize
      - closed
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight UTC
  workflow_call:
    secrets:
      SNYK_TOKEN:
        required: true
        description: 'Snyk API Token'
      SNYK_ORG_ID:
        required: true
        description: 'Snyk Organization ID'
      SNYK_SLACK_WEBHOOK_URL:
        required: false
jobs:
  vulnerability-scan:
    runs-on: ubuntu-latest
    env:
      MY_GITHUB_ACTOR: ${{ secrets.MY_GITHUB_ACTOR }}
      MY_GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      SNYK_ORG_ID: ${{ secrets.SNYK_ORG_ID }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Run Snyk to check Docker images for vulnerabilities
        run: docker build . --file Dockerfile-WorkFlow --tag laa-landing-page:latest --progress=plain --no-cache

      # Using the Snyk Docker Action to check the container for vulnerabilities
      - name: Docker Vulnerabilities
        uses: snyk/actions/docker@master
        continue-on-error: true
        with:
          image: laa-landing-page:latest
          args: --org=${{ secrets.SNYK_ORG_ID }} --sarif-file-output=snyk_docker_test.sarif --sarif

      # Snyk bug fix
      - name: Replace Security-Severity NULL
        run:
          sed -i 's/"null"/"0"/g' snyk_docker_test.sarif

      - name: Run Snyk to Check for Vulnerabilities
        uses: snyk/actions/gradle@master
        continue-on-error: true
        with:
          command: test --sarif
          args: --org=${{ secrets.SNYK_ORG_ID }} --sarif-file-output=snyk_test.sarif

      # # Snyk bug fix
      - name: Replace Security-Severity Undefined
        run:
          sed -i 's/"undefined"/"0"/g' snyk_test.sarif

      # Provides static code analysis for your source code to identify security flaws directly in your proprietary code
      - name: Run Snyk Code Test
        uses: snyk/actions/gradle@master
        continue-on-error: true
        with:
          command: code test --sarif
          args: --org=${{ secrets.SNYK_ORG_ID }} --sarif-file-output=snyk_code_test.sarif

      # Scans configuration files for Infrastructure as Code (IaC) projects, such as Terraform, Kubernetes, and AWS CloudFormation.
      - name: Snyk Infrastructure-as-Code Scanning
        uses: snyk/actions/gradle@master
        continue-on-error: true
        with:
          command: iac test --sarif
          args: --org=${{ secrets.SNYK_ORG_ID }} --sarif-file-output=snyk_iac_test.sarif

      - name: Create SARIF directory and move SARIF files
        run: |
          mkdir sarif_files &&
          mv snyk_test.sarif snyk_code_test.sarif snyk_iac_test.sarif snyk_docker_test.sarif sarif_files/

      # A snyk.sarif file is generated in the above steps, which is uploaded to GitHub Code Scanning
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sarif_files

      - name: Run SARIF severity count 
        run: |
          chmod +x ./count_snyk_vulns.sh
          ./count_snyk_vulns.sh sarif_files/*.sarif > severity_counts.txt
          cat severity_counts.txt
          # Export values to GitHub environment for next steps
          grep CRITICAL severity_counts.txt >> $GITHUB_ENV
          grep HIGH severity_counts.txt >> $GITHUB_ENV
          grep MEDIUM severity_counts.txt >> $GITHUB_ENV
          grep LOW severity_counts.txt >> $GITHUB_ENV

      - name: Set SHOULD_NOTIFY
        run: |
          if [ "$CRITICAL" -ne 0 ] || [ "$HIGH" -ne 0 ] || [ "$MEDIUM" -ne 0 ] || [ "$LOW" -ne 0 ]; then
            echo "SHOULD_NOTIFY=true" >> $GITHUB_ENV
          else
            echo "SHOULD_NOTIFY=false" >> $GITHUB_ENV
          fi

      - name: Send notification to Slack
        id: slack
        if: always() && env.SHOULD_NOTIFY == 'true' && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
        uses: slackapi/slack-github-action@b0fa283ad8fea605de13dc3f449259339835fc52 #v2.1.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "SNYK Vulnerability Scan Report: ${{ github.event.repository.name }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Scan Summary:*"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":rotating_light: *CRITICAL:* ${{ env.CRITICAL }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":sign-warning: *HIGH:* ${{ env.HIGH }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":orange_heart: *MEDIUM:* ${{ env.MEDIUM }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":yellow_heart: *LOW:* ${{ env.LOW }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Please review the detailed scan results and take necessary actions. \n\n View Details on GitHub: https://github.com/${{ github.repository }}/security/code-scanning"
                  }
                }
              ]
            }
          webhook-type: incoming-webhook

        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SNYK_SLACK_WEBHOOK_URL }}

      - name: Fail Pipeline if Vulnerability Found
        run: |
          if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ] || [ "$MEDIUM" -gt 0 ] || [ "$LOW" -gt 0 ]; then
            echo "Vulnerabilities detected â€” failing the job"
            exit 1
          else
            echo "No vulnerabilities found."
          fi
