plugins {
    id 'uk.gov.laa.ccms.springboot.laa-ccms-spring-boot-gradle-plugin' version '0.0.32'
    id "io.sentry.jvm.gradle" version "5.5.0"
    id "org.flywaydb.flyway" version "9.22.3"
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

checkstyle {
    toolVersion = '10.21.2'
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
}

repositories {
    mavenCentral()
}


dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'
    implementation 'uk.gov.laa.ccms.springboot:laa-ccms-spring-boot-starter-govuk-dialect'
    implementation 'org.postgresql:postgresql'
    implementation 'org.mapstruct:mapstruct:1.6.3'
    implementation 'org.hibernate.validator:hibernate-validator:9.0.1.Final'

    compileOnly 'org.projectlombok:lombok'


    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'
    annotationProcessor 'org.projectlombok:lombok'

    // test dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation('org.testcontainers:postgresql')
    testImplementation('org.testcontainers:junit-jupiter')
    testImplementation('org.springframework.boot:spring-boot-testcontainers')
    testImplementation 'org.jmockit:jmockit:1.49'

}


flyway {
    locations = System.getenv('INCLUDE_DEMO_DATA') == 'true' ?
            ['classpath:db/migration', 'classpath:db/migration-local'] :
            ['classpath:db/migration']
}

test {
    jvmArgs "-javaagent:${classpath.find { it.name.contains("jmockit") }.absolutePath}"
    useJUnitPlatform()
    // finalizedBy jacocoTestReport
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        showStandardStreams = true
    }
}